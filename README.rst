ORFanage: Ultra-efficient and sensitive method to search for ORFs in spliced genomes guided by reference annotation to maximize protein similarity within genes.
================================================================================================

.. image:: https://img.shields.io/badge/License-GPLv3-blue.svg
:target: https://opensource.org/licenses/GPL-3.0
:alt: GPLv3 License

.. contents::
:local:
:depth: 2

Introduction
^^^^^^^^^^^^

ORFanage aids in finding the best matching ORF for each transcript in the
GTF file based on evidence from one or more reference annotaitons. The method is designed to
identify cases of known ORFs fitting the query transcript both with and without modifications,
introduced by additional exons, alternative start and end sites, etc. ORFanage is also designed
to quantify any changes to the reference annotation which are introduced by the splice variation.

Varabyou, A., Erdogdu, B., Pockrandt, C., Rincon, N., Salzberg, S. L., & Pertea, M. (2022). **ORFanage: Ultra-efficient and sensitive method to search for ORFs in spliced genomes guided by reference annotation to maximize protein similarity within genes.**. `...`, ...

Installation
^^^^^^^^^^^^

Building from source
""""""""""""""""""""

If you want to build it from source, we recommend cloning the git repository as shown below.

::

    $ git clone https://github.com/alevar/ORFanage.git --recursive
    $ cd ORFanage
    $ cmake -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" .
    $ make -j4

For a fully static build -DORFANAGE_STATIC_BUILD=1 needs to be added to the list of arguments in the cmake command.

By default make install will likely require administrative privileges. To specify custom installation path -DCMAKE_INSTALL_PREFIX=<custom/installation/path> needs to be added to the list of arguments in the cmake command.

If you are using a very old version of Git (< 1.6.5) the flag --recursive does not exist. In this case you need to clone the submodule separately (git submodule update --init --recursive).

**Requirements**

Operating System
GNU/Linux

Architecture
Intel/AMD platforms that support ``POPCNT``

Compiler
GCC ≥ 4.9, Clang ≥ 3.8

Build system
CMake ≥ 3.2

Language support
C++14

Getting started
^^^^^^^^^^^^^^^

Usage: orfanage [OPTIONS] <templates>...

Arguments:

  <templates>         One or more GFF/GTF files with coding exons to be used as
                      templates.

Options:

  --query STRING      Path to a GTF query file with transcripts to which CDSs are to
                      be ported
  --output STRING     Basename for all output files generated by this software
  --reference STRING  Path to the reference genome file in FASTA format. This
                      parameter is required when the following parameters are used:
                      1. cleanq; 2. cleant; 3. pd.
  --cleanq            If enabled - will ensure all transcripts in the output file
                      will have a valid start and end codons. This option requires
                      the use of --reference parameter
  --cleant            If enabled - will ensure all ORFs in the reference annotations
                      start with a valid start codon and end with the first available
                      stop codon. This option requires the use of --reference
                      parameter
  --rescue            If enabled - will attempt rescuing the broken ORFs in the
                      reference annotations. This option requires the use of
                      --reference parameter
  --lpd INT           percent difference by length between the original and reference
                      transcripts. If -1 (default) is set - the check will not be
                      performed.
  --ilpd INT          percent difference by length of bases in frame of the reference
                      transcript. If -1 (default) is set - the check will not be
                      performed.
  --mlpd INT          percent difference by length of bases that are in both query
                      and reference. If -1 (default) is set - the check will not be
                      performed.
  --minlen INT        minimum length of an open reading frame to consider for the
                      analysis
  --mode STRING       hich CDS to report: ALL, LONGEST, BEST_SCORE. Default:
  --stats STRING      Output a separate file with stats for each query/template pair
  --nc                Write transcripts which do not have CDS as well
  --threads INT       Number of threads to run in parallel
  --use_id BOOL       If enabled, only transcripts with the same gene ID from the
                      quesry file will be used to form a bundle. In this mode the
                      same template transcript may be used in several bundles, if
                      overlaps transcripts with different gene_ids.
  --pi INT            percent identity between the query and template sequences. This
                      option requires --reference parameter to be set. If enabled -
                      will run alignment between passing pairs.
  --gapo INT          Gap-open penalty
  --gape INT          Gap-extension penalty
  --ppp_mode STRING   Which CDS to report: LONGEST, BEST. Default:
  --min-score FLOAT   Only consider ORFs with a minimum weighted PhyloCSF mean score
                      (range from -15 to +15, >0 more likely to be protein-coding).
                      Default: 0.000000
  --min-codons INT    Only consider ORFs with a minimum codon length. Default: 25
  --tracks STRING     Path to the bigWig file PhyloCSF+1.bw (expects the other 5
                      frames to be in the same directory, optionally the power
                      track).

Help options:

  --help              Prints this help message

Data
^^^^

Sample datasets are provided in the "example" directory to test and get familiar with ORFanage.
The included examples can be run with the following base commands:

1. orfanage --reference <path/to/grch38.fa> --output <path/to/output/directory/>test000001.gtf --query example/refseq.test000001.gtf <--additional arguments> --stats <path/to/output/directory/>test000001.stats example/mane.test000001.gtf
2. orfanage --reference <path/to/grch38.fa> --output <path/to/output/directory/>test000002.gtf --query example/refseq.test000002.gtf <--additional arguments> --stats <path/to/output/directory/>test000002.stats example/mane.test000002.gtf